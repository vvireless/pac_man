import math
import pygame
import time

pygame.init()

WIDTH = 550
HEIGHT = 550
GRID_SIZE = 6
CELL_SIZE = WIDTH // GRID_SIZE

screen = pygame.display.set_mode([WIDTH, HEIGHT])
timer = pygame.time.Clock()
fps = 60
gamescreen = 0

background = pygame.image.load('maze.png').convert()
begin_screen = pygame.image.load('begin.png')
francis = pygame.image.load('fracnsi.png').convert_alpha()
mom = pygame.image.load('mom.png').convert_alpha()
fish = pygame.image.load('fish.png').convert_alpha()
win_screen = pygame.image.load('win.png')
lose_screen = pygame.image.load('lose.png')
fish = pygame.transform.scale(fish, (CELL_SIZE // 3, CELL_SIZE // 3))  # scale the fish image to fit the grid

francis_x = 195
francis_y = 100
francis_speed = 6

mom_x = 200
mom_y = 200
mom_speed = 2

obstacle = pygame.Rect(173, 180, 199, 10)
points = 0

obstacles = [
    # middle square
    pygame.Rect(173, 370, 199, 10),
    pygame.Rect(362, 180, 10, 190),
    pygame.Rect(173, 180, 10, 190),

    pygame.Rect(83, 86, 10, 110),
    pygame.Rect(83, 84, 100, 10),
    pygame.Rect(84, 275, 10, 193),
    pygame.Rect(85, 460, 100, 10),
    pygame.Rect(268, 84, 200, 10),
    pygame.Rect(458, 86, 10, 110),
    pygame.Rect(458, 275, 10, 190),
    pygame.Rect(268, 460, 200, 10),
    pygame.Rect(362, 275, 100, 10),
    pygame.Rect(362, 466, 10, 110)
]

no_fish_pos = [13, 14, 15, 20, 21]
fish_positions = {(x * GRID_SIZE + y): (x * CELL_SIZE + CELL_SIZE // 4, y * CELL_SIZE + CELL_SIZE // 4) for x in range(GRID_SIZE) for y in range(GRID_SIZE) if x * GRID_SIZE + y not in no_fish_pos}


print(fish_positions)

def francis_move():
    global new_x, new_y
    if keys[pygame.K_LEFT]:
        new_x -= francis_speed
    if keys[pygame.K_RIGHT]:
        new_x += francis_speed
    if keys[pygame.K_UP]:
        new_y -= francis_speed
    if keys[pygame.K_DOWN]:
        new_y += francis_speed


def obstacle_gen():
    pygame.draw.rect(screen, (255, 255, 255), obstacle)
    for ob in obstacles:
        pygame.draw.rect(screen, (167, 231, 30), ob)


def detect_coll():
    global francis_x, francis_y, new_x, new_y, obstacle, francis_rect
    francis_rect = pygame.Rect(new_x, new_y, francis.get_width() - 10, francis.get_height() - 10)

    if 0 <= new_x <= WIDTH - francis.get_width() and 0 <= new_y <= HEIGHT - francis.get_height():
        collision = False
        for ob in obstacles:
            if francis_rect.colliderect(ob) or francis_rect.colliderect(obstacle):
                collision = True
                break

        if not collision:
            francis_x, francis_y = new_x, new_y

    screen.blit(francis, (francis_x, francis_y))


def move_mom():
    global mom_x, mom_y, previous_mom_x, previous_mom_y
    dir_x = francis_x - mom_x
    dir_y = francis_y - mom_y

    # calculate the distance of mom from francis
    distance = math.sqrt(dir_x ** 2 + dir_y ** 2)

    # make consistent speed
    if distance != 0:
        dir_x /= distance
        dir_y /= distance

    # move mom towards francis
    new_mom_x = mom_x + dir_x * mom_speed
    new_mom_y = mom_y + dir_y * mom_speed

    mom_rect = pygame.Rect(new_mom_x, new_mom_y, mom.get_width(), mom.get_height())
    collision = False
    for obstacle in obstacles:
        if mom_rect.colliderect(obstacle):
            collision = True
            break

    #update position if there's no collision
    if not collision:
        mom_x = new_mom_x
        mom_y = new_mom_y
    else:
        # check if mom isn't moving
        if previous_mom_x == mom_x and previous_mom_y == mom_y:
            # prioritize y-direction
            new_mom_y = mom_y + dir_y * mom_speed
            mom_rect = pygame.Rect(mom_x, new_mom_y, mom.get_width(), mom.get_height())
            collision = False
            for obstacle in obstacles:
                if mom_rect.colliderect(obstacle):
                    collision = True
                    break

            if not collision:
                mom_y = new_mom_y
            else:
                # if still colliding, try x-direction
                new_mom_x = mom_x + dir_x * mom_speed
                mom_rect = pygame.Rect(new_mom_x, mom_y, mom.get_width(), mom.get_height())
                collision = False
                for obstacle in obstacles:
                    if mom_rect.colliderect(obstacle):
                        collision = True
                        break

                if not collision:
                    mom_x = new_mom_x

    previous_mom_x = mom_x
    previous_mom_y = mom_y

    screen.blit(mom, (mom_x, mom_y))


def detect_francis_mom_coll():
    global francis_rect, gamescreen

    mom_rect = pygame.Rect(mom_x, mom_y, mom.get_width() - 20, mom.get_height() - 20) #mom collision rectangle
    francis_rect = pygame.Rect(new_x, new_y, francis.get_width() - 10, francis.get_height()) #francis collision rect

    if francis_rect.colliderect(mom_rect):
        print("Francis collided with Mom!")
        gamescreen = 2
        return True 

    return False  
    

def draw_fish():
    for i, pos in fish_positions.items():
        if i not in no_fish_pos:
            screen.blit(fish, pos)


def check_fish_collision():
    global fish_positions, francis_rect, points
    to_remove = []
    for i, pos in fish_positions.items():
        fish_rect = pygame.Rect(pos[0], pos[1], fish.get_width(), fish.get_height())
        if fish_rect.colliderect(francis_rect) and i not in no_fish_pos:
            no_fish_pos.append(i)
            to_remove.append(i)
            points += 1

    # remove collided fish 
    for fish_gone in reversed(to_remove):
        del fish_positions[fish_gone]

    draw_fish()


start_time = pygame.time.get_ticks()
move_mom_delay = 4000  # 4 seconds delay

run = True
while run:
    timer.tick(fps)
    screen.blit(background, (0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
            
    if gamescreen == 0:
        screen.blit(begin_screen, (0, 0))
        keys = pygame.key.get_pressed()

        if keys[pygame.K_SPACE]:
            gamescreen = 1

        pygame.display.flip()
            
    elif gamescreen == 1:
    
        keys = pygame.key.get_pressed()
    
        new_x, new_y = francis_x, francis_y
    
        francis_move()
    
        detect_coll()
    
        obstacle_gen()

        detect_francis_mom_coll()
    
        check_fish_collision()
    
        font = pygame.font.Font(None, 36)
        text = font.render(f'Fish: {points}/31', True, (255, 255, 255))
        screen.blit(text, (10, 10))
    
        # 4 second headstart for player
        current_time = pygame.time.get_ticks()
        if current_time - start_time >= move_mom_delay:
            move_mom()
        else:
            screen.blit(mom, (200, 200))


        # win screen
        if points == 31:
            time.sleep(0.7)
            gamescreen = 3
            print('you win!')
            screen.blit(win_screen,(0,0))

        # lose screen :(
        if gamescreen == 2:
            time.sleep(0.7)
            print('you lost!')
            screen.blit(lose_screen, (0,0))
    
        pygame.display.flip()

pygame.quit()
